/**
 * 0 Core Class
 * @constructor
 */
var Core = function () {
    
    var 
        _self = this,
        
        /**
         * 引用依赖项
         **/
        events = require('events'),
        path = require('path'),
        fs = require('fs'),
        
        Q = require('q'),
        gulp = require('gulp'),
        merge = require('merge'),
        
        utils = require('./utils.js'),
        
        /**
         * 创建事件挂钩
         */
        emitter = this.emitter = new events.EventEmitter()
        ;
    
    /**
     * 使用 Alibaba Gitlab 种子
     * 注意：请确保仓库权限为 Public + 可读
     * @param args {object} 参数集合
     * @param args.gitPath {string} git仓库地址，格式为: 组名/仓库名
     * @param args.params {object} 使用种子的参数
     * @param args.outputPath {string} 处理后输出地址
     * @return promise
     * @example

        var Core0 = require('@ali/0-client-core');
        var core = new Core0();
     
        core.useAliGitlabSeed({
            gitPath : 'seed/example-new',
            params : {
                user : 'xunuo',
                module : 'demo'
            },
            outputPath : './output'
        }).then(function(cb){
            // console.log(cb);
        },function(error){
            // console.log(error);
        })
     
     */
    _self.useAliGitlabSeed = function(args){
        
        return utils.downloadToTemp({
            url : 'http://0.alif2e.com/download.zip?gitlabProjectPath=' + args.gitPath
        }).then(function(downloadCb){
            
            // console.log('Download: ',downloadCb.url, ' --> ' , downloadCb.savePath);
            
            return utils.unzip({
                zipPath : downloadCb.savePath,
                outputPath : path.dirname(downloadCb.savePath)
            })
            
        }).then(function(unZipCb){
            
            // console.log('Unzip: ',unZipCb.zipPath, ' --> ' , unZipCb.outputPath);
            
            return _self.processSeed({
                seedPath : path.join( unZipCb.outputPath, './seed'),
                outputPath : args.outputPath,
                params : args.params
            });
            
        }).then(function(processSeedCb){
            
            // console.log('processSeed: ',processSeedCb.seedPath, ' --> ' , processSeedCb.outputPath, '[', processSeedCb.params , ']');
            
            return processSeedCb;
            
        });
        
    };
    
    /**
     * 处理本地种子(文件夹)
     * @param args {object} 参数集合
     * @param args.seedPath {string} 处理的种子路径
     * @param args.outputPath {string} 处理后输出路径
     * @param [args.params] {json} 传入用于加工的参数
     * @return promise
     * @example
     
        var Core0 = require('@ali/0-client-core');
        var core = new Core0();
     
        core.processSeed({
            seedPath : './seed',
            outputPath : './output',
            params : {
                user : 'xunuo',
                module : 'demo'
            }
        }).then(function(cb){
            // console.log(cb);
        },function(error){
            // console.log(error);
        });
     */
    _self.processSeed = function(args){

        // 新建许诺
        var deferred = Q.defer();
        
        // 发射事件 - 开始处理种子
        emitter.emit('processSeedStart');
        
        // 检查参数
        if(!args || !args.seedPath || !args.outputPath){
            deferred.reject({
                error : '处理种子需要传入合理的参数。'
            });return deferred.promise;
        }
        
        var seedPath = path.resolve(args.seedPath),
            // 处理完毕输出目录路径
            outputPath = path.resolve(args.outputPath),
            // 种子配置任务路径
            seedTasksPath = path.join( seedPath , '/tasks.js')
            ;
        
        // 用户不指定则使用默认种子
        if ( !fs.existsSync( seedTasksPath ) ) {
            seedTasksPath = __dirname + '/default-tasks.js';
        }

        // 判断是否创建输出目录
        if(!fs.existsSync( outputPath )){
            utils.mkdirsSync(outputPath);
        }
        
        // 执行种子中的任务
        var tasks = require(seedTasksPath);
        tasks({
            utils : utils,
            merge : merge,
            defer : Q.defer,
            seedPath : seedPath,
            outputPath : outputPath,
            gulp : gulp,
            gulpRename : require('gulp-rename'),
            gulpReplace : require('gulp-replace'),
            params : args.params
        }).then(function(cb){
            emitter.emit('processSeedComplete',cb);
            deferred.resolve(cb);
        },function(error){
            deferred.reject(error);
        });
        
        // 返回许诺
        return deferred.promise;
        
    };
    
};

module.exports = Core;