module.exports = function(args){
    
    // 定义参数及引用依赖
    var 
        // 获取路径
        seedPath = args.seedPath,
        outputPath = args.outputPath,
        
        // 引入依赖
        defer = args.defer, //promise
        utils = args.utils,
        merge = args.merge, // merge
        gulp = args.gulp,
        gulpRename = args.gulpRename,
        gulpReplace = args.gulpReplace,
        
        // 定义默认参数
        defaultParams = {
            user : 'xunuo',
            module : 'example-demo',
            email : 'xunuo@email.com',
            info : {
                id : 9527,
                age : 20
            }
        },
        
        // 合并参数
        params = merge(true,defaultParams,args.params),
        
        // 扁平化参数
        flattenParams = utils.flattenData(params),
        
        // 声明全局许诺
        allDeferred = defer()
        ;
    
    // 创建任务
    gulp.task('default', [], function() {
        
        gulp.src([seedPath + '/content/**/**', seedPath + '/content/**/.*'])
            
            // 替换路径中参数
            .pipe(gulpRename(function (path) {
                for(var key in flattenParams) {
                    var val = flattenParams[key];
                    path.dirname = utils.replaceAll(path.dirname,'{' + key + '}',val);
                    path.basename = utils.replaceAll(path.basename,'{' + key + '}',val);
                }

            }))
            
            // 替换内容中的参数
            .pipe(gulpReplace(/[.\s\S]*/,function(content){
                for(var key in flattenParams) {
                    var val = flattenParams[key];
                    // 替换参数
                    content = utils.replaceAll(content,'{' + key + '}',val);
                    
                    // 转成大驼峰 如: {module.toUCC()}
                    content = utils.replaceAll(content,'{' + key + '.toUCC()}',utils.toUpperCamelCase(val));
                    
                    // 转成小驼峰 如: {module.toLCC()}
                    content = utils.replaceAll(content,'{' + key + '.toLCC()}',utils.toLowCamelCase(val));
                }
                return content;
            }))
            
        .pipe(gulp.dest(outputPath))
            
        // 所有任务结束触发返回许诺
        .on('end',function(){
            allDeferred.resolve({
                seedPath : seedPath,
                outputPath : outputPath,
                params : params,
                flattenData : flattenParams
            });
         });
        
    });
    
    // 执行任务
    gulp.start('default');
    
    return allDeferred.promise;
    
};